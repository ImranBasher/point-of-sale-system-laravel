<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class Product extends Model
{
    use HasFactory;

    protected $fillable = [
        'title',
        'slug',
        'sku',
        'short_description',
        'long_description',
        'thumbnail',
        'brand_id',
        'status',
        'user_id',
        'created_by_id',
        'updated_by_id',
        'created_at',
        'updated_at'
    ];

    public static function totalProduct(){
        return Product::query()->count();
    }

    public function categories(){
        return $this->belongsToMany(Category::class, 'product_categories');
    }
    public function brand(){
        return $this->belongsTo(Brand::class);
    }

    public function productPictures(){
        return $this->hasMany(ProductPicture::class,'product_id');
    }

    public function cart(){
        return $this->hasMany(Cart::class);
    }

    public function productStock(){
        return $this->hasMany(ProductStock::class);
    }

    public function purchaseProduct(){
        return $this->hasOne(PurchaseProduct::class);
    }

    public function purchaseProducts(){
        return $this->hasMany(PurchaseProduct::class, 'product_id');
    }


    public function saleProduct(){
        return $this->hasMany(SalesProduct::class,'product_id');
    }





    // // Slug is automatically generated by the model ,
    /**
     * Explanation:
     * boot() Method: This is a special method in Laravel models where you can define model event listeners. Here, parent::boot() is called to ensure the default booting behavior is preserved.
     *
     * static::creating(): This event listener is triggered before a new record is inserted into the database. It allows you to manipulate the model's attributes, like generating a unique slug before saving.
     *
     * Str::slug(): This Laravel helper method creates a slug from a given string. It converts the string into a URL-friendly format by replacing spaces and special characters.
     *
     * Ensure Uniqueness: The while loop checks if the generated slug already exists in the database. If it does, it appends a number to make it unique (e.g., product-name-1, product-name-2).
     */


//    protected static function boot()
//    {
//        parent::boot();
//
//        static::creating(function ($product) {
//            $slug = Str::slug($product->name, '-');
//
//            // Ensure the slug is unique
//            $originalSlug = $slug;
//            $counter = 1;
//            while (Product::where('slug', $slug)->exists()) {
//                $slug = $originalSlug . '-' . $counter;
//                $counter++;
//            }
//
//            $product->slug = $slug;
//        });
//    }

}
